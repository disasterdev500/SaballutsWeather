// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SaballutsWeatherPersistence.DbModels;

#nullable disable

namespace SaballutsWeatherPersistence.Migrations
{
    [DbContext(typeof(SaballutsWeatherContext))]
    [Migration("20240313111746_Add Raw Weather Record")]
    partial class AddRawWeatherRecord
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SaballutsWeatherPersistence.DbModels.DbDailyWeatherStats", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<double>("AccumulatedRain")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("AverageAbsolutePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("AverageDewPoint")
                        .HasColumnType("decimal(4,2)");

                    b.Property<double>("AverageGustSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("AverageIndoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("AverageIndoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("AverageOutdoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("AverageOutdoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<double>("AverageRelativePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("AverageSolarRadiation")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("AverageThermalSensation")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("AverageUVI")
                        .HasColumnType("integer");

                    b.Property<double>("AverageWindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("MaxAbsolutePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MaxAbsolutePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxDewPoint")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxDewPointAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxGustSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxGustSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxIndoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxIndoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxIndoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxIndoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxOutdoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxOutdoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxOutdoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxOutdoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxRelativePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MaxRelativePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxSolarRadiation")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MaxSolarRadiationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxThermalSensation")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxThermalSensationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxUVI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MaxUVIAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxWindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxWindSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinAbsolutePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MinAbsolutePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinDewPoint")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinDewPointAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinGustSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinGustSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MinIndoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinIndoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinIndoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinIndoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MinOutdoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinOutdoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinOutdoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinOutdoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinRelativePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MinRelativePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinSolarRadiation")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MinSolarRadiationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinThermalSensation")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinThermalSensationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MinUVI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MinUVIAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinWindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinWindSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WindDirection")
                        .HasColumnType("integer");

                    b.HasKey("Date");

                    b.ToTable("DailyWeatherStats", (string)null);
                });

            modelBuilder.Entity("SaballutsWeatherPersistence.DbModels.DbMonthlyWeatherStats", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<double>("AccumulatedRain")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("AverageAbsolutePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("AverageDewPoint")
                        .HasColumnType("decimal(4,2)");

                    b.Property<double>("AverageGustSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("AverageIndoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("AverageIndoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("AverageOutdoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("AverageOutdoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<double>("AverageRelativePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("AverageSolarRadiation")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("AverageThermalSensation")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("AverageUVI")
                        .HasColumnType("integer");

                    b.Property<double>("AverageWindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("MaxAbsolutePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MaxAbsolutePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxDewPoint")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxDewPointAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxGustSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxGustSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxIndoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxIndoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxIndoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxIndoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxOutdoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxOutdoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxOutdoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxOutdoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxRelativePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MaxRelativePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxSolarRadiation")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MaxSolarRadiationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxThermalSensation")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxThermalSensationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxUVI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MaxUVIAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxWindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxWindSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinAbsolutePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MinAbsolutePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinDewPoint")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinDewPointAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinGustSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinGustSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MinIndoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinIndoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinIndoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinIndoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MinOutdoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinOutdoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinOutdoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinOutdoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinRelativePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MinRelativePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinSolarRadiation")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MinSolarRadiationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinThermalSensation")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinThermalSensationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MinUVI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MinUVIAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinWindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinWindSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WindDirection")
                        .HasColumnType("integer");

                    b.HasKey("Date");

                    b.ToTable("MonthlyWeatherStats", (string)null);
                });

            modelBuilder.Entity("SaballutsWeatherPersistence.DbModels.DbRawWeatherRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AbsolutePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DewPoint")
                        .HasColumnType("decimal(4,2)");

                    b.Property<double>("GustSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("IndoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("IndoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("OutdoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("OutdoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<double>("RainEpisode")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("RainPerDay")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("RainPerHour")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("RainPerMonth")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("RainPerWeek")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("RainPerYear")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("RelativePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("SolarRadiation")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("ThermalSensation")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("UVI")
                        .HasColumnType("integer");

                    b.Property<int>("WindDirection")
                        .HasColumnType("integer");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("RawWeatherRecord", (string)null);
                });

            modelBuilder.Entity("SaballutsWeatherPersistence.DbModels.DbWeatherRecord", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("AbsolutePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("DewPoint")
                        .HasColumnType("decimal(4,2)");

                    b.Property<double>("GustSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("IndoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("IndoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("OutdoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("OutdoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<double>("RainEpisode")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("RainPerDay")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("RainPerHour")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("RainPerMonth")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("RainPerWeek")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("RainPerYear")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("RelativePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("SolarRadiation")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("ThermalSensation")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("UVI")
                        .HasColumnType("integer");

                    b.Property<int>("WindDirection")
                        .HasColumnType("integer");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Date");

                    b.ToTable("WeatherRecord", (string)null);
                });

            modelBuilder.Entity("SaballutsWeatherPersistence.DbModels.DbWeeklyWeatherStats", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<double>("AccumulatedRain")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("AverageAbsolutePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("AverageDewPoint")
                        .HasColumnType("decimal(4,2)");

                    b.Property<double>("AverageGustSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("AverageIndoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("AverageIndoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("AverageOutdoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("AverageOutdoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<double>("AverageRelativePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("AverageSolarRadiation")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("AverageThermalSensation")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("AverageUVI")
                        .HasColumnType("integer");

                    b.Property<double>("AverageWindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("MaxAbsolutePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MaxAbsolutePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxDewPoint")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxDewPointAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxGustSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxGustSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxIndoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxIndoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxIndoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxIndoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxOutdoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxOutdoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxOutdoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxOutdoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxRelativePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MaxRelativePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxSolarRadiation")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MaxSolarRadiationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxThermalSensation")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxThermalSensationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxUVI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MaxUVIAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxWindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxWindSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinAbsolutePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MinAbsolutePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinDewPoint")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinDewPointAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinGustSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinGustSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MinIndoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinIndoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinIndoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinIndoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MinOutdoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinOutdoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinOutdoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinOutdoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinRelativePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MinRelativePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinSolarRadiation")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MinSolarRadiationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinThermalSensation")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinThermalSensationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MinUVI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MinUVIAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinWindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinWindSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WindDirection")
                        .HasColumnType("integer");

                    b.HasKey("Date");

                    b.ToTable("WeeklyWeatherStats", (string)null);
                });

            modelBuilder.Entity("SaballutsWeatherPersistence.DbModels.DbYearlyWeatherStats", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<double>("AccumulatedRain")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("AverageAbsolutePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("AverageDewPoint")
                        .HasColumnType("decimal(4,2)");

                    b.Property<double>("AverageGustSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("AverageIndoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("AverageIndoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("AverageOutdoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("AverageOutdoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<double>("AverageRelativePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("AverageSolarRadiation")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("AverageThermalSensation")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("AverageUVI")
                        .HasColumnType("integer");

                    b.Property<double>("AverageWindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<double>("MaxAbsolutePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MaxAbsolutePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxDewPoint")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxDewPointAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxGustSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxGustSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxIndoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxIndoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxIndoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxIndoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxOutdoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxOutdoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxOutdoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxOutdoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxRelativePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MaxRelativePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxSolarRadiation")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MaxSolarRadiationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxThermalSensation")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MaxThermalSensationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxUVI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MaxUVIAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxWindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MaxWindSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinAbsolutePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MinAbsolutePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinDewPoint")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinDewPointAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinGustSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinGustSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MinIndoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinIndoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinIndoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinIndoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MinOutdoorHumidity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinOutdoorHumidityAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinOutdoorTemperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinOutdoorTemperatureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinRelativePressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MinRelativePressureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinSolarRadiation")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("MinSolarRadiationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinThermalSensation")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("MinThermalSensationAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MinUVI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MinUVIAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinWindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinWindSpeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WindDirection")
                        .HasColumnType("integer");

                    b.HasKey("Date");

                    b.ToTable("YearlyWeatherStats", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
